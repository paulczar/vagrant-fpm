#! /bin/sh
#
#    /etc/rc.d/init.d/logstash-send
#
#    Starts Logstash as a daemon
#
# description: Starts Logstash as a daemon
 
### BEGIN INIT INFO
# Provides: logstash
# Required-Start: $local_fs $remote_fs
# Required-Stop: $local_fs $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: S 0 1 6
# Short-Description: Logstash
# Description: Starts Logstash as a daemon.
# Author: christian.paredes@sbri.org, modified by https://github.com/paul-at and www.crocoware.com
 
### END INIT INFO
 
# Amount of memory for Java
JAVAMEM=256M
 
LOCATION=/opt/logstash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
DESC="Logstash Daemon"
NAME=java
DAEMON=`which java`
CONFIG_DIR="/opt/logstash/conf.d"
LOGFILE="/opt/logstash/log/logstash.log"
PATTERNSPATH="/opt/logstash/patterns"
JARNAME="logstash-monolithic.jar"
ARGS="-Xmx$JAVAMEM -Xms$JAVAMEM -jar /opt/logstash/bin/${JARNAME} agent --config ${CONFIG_DIR} --log ${LOGFILE} --grok-patterns-path ${PATTERNSPATH} -v"
SCRIPTNAME=/etc/init.d/logstash
base=logstash
 
# Exit if the package is not installed
if [ ! -x "$DAEMON" ]; then
{
  echo "Couldn't find $DAEMON"
  exit 99
}
fi
 
. /etc/init.d/functions
 
#
# Function that starts the daemon/service
#
do_start()
{
  cd $LOCATION && \
  ($DAEMON $ARGS &) \
  && success || failure
}
 
get_pid()
{
  pid=`ps auxww | grep 'logstash-monolithic.jar' | grep java | awk '{print $2}'`
}
 
#
# Function that stops the daemon/service
#
do_stop()
{
    get_pid
                       if checkpid $pid 2>&1; then
                           # TERM first, then KILL if not dead
                           kill -TERM $pid >/dev/null 2>&1
                           usleep 100000
                           if checkpid $pid && sleep 1 &&
                              checkpid $pid && sleep $delay &&
                              checkpid $pid ; then
                                kill -KILL $pid >/dev/null 2>&1
                                usleep 100000
                           fi
                        fi
                        checkpid $pid
                        RC=$?
                        [ "$RC" -eq 0 ] && failure $"$base shutdown" || success $"$base shutdown"
 
}
 
case "$1" in
  start)
    if [[ -f /var/lock/subsys/$JARNAME ]] ; then
        get_pid
        echo -n "$DESC already running ($pid)" && success
    else
        echo -n "Starting $DESC: "
        do_start
        touch /var/lock/subsys/$JARNAME
    fi
    ;;
  stop)
    echo -n "Stopping $DESC: "
    do_stop
    rm /var/lock/subsys/$JARNAME
    ;;
  restart|reload)
    echo -n "Restarting $DESC: "
    do_stop
    do_start
    ;;
  status)
    get_pid
    if [[ $pid == "" ]] ; then
        echo -n "$DESC stopped"
    else
        get_pid
        echo -n "$DESC running ($pid)"
    fi
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
    ;;
esac
 
echo
exit 0
